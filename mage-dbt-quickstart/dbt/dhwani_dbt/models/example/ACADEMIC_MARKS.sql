{{ config(materialized='table') }}

WITH StudentDetails AS (
    SELECT 
        sp.STUDENT_ID,
        CONCAT(sp.FIRST_NAME, ' ', sp.MIDDLE_NAME, ' ', sp.LAST_NAME) AS STUDENT_NAME,
        sp.ACADEMIC_YEAR,
        pp.FATHER_NAME,
        pp.MOTHER_NAME,
        sp.DATE_OF_BIRTH,
        ci.CLASS_ID AS CLASS,
        s.SUBJECT,
        m.PERIODIC_TEST_1,
        m.NOTE_BOOK_1,
        m.SUBJECT_ENRICHMENT_1,
        m.HALF_YEARLY,
        COALESCE(m.PERIODIC_TEST_1, 0) + COALESCE(m.NOTE_BOOK_1, 0) + COALESCE(m.SUBJECT_ENRICHMENT_1, 0) + COALESCE(m.HALF_YEARLY, 0) AS TERM_1_TOTAL,
        m.WORK_EDUCATION_1,
        m.ART_EDUCATION_1,
        m.HEALTH_AND_HYGIENE_1,
        m.REGULARITY_AND_PUNCTUALLITY_1,
        m.PERIODIC_TEST_2,
        m.NOTE_BOOK_2,
        m.SUBJECT_ENRICHMENT_2,
        m.ANNUAL,
        COALESCE(m.PERIODIC_TEST_2, 0) + COALESCE(m.NOTE_BOOK_2, 0) + COALESCE(m.SUBJECT_ENRICHMENT_2, 0) + COALESCE(m.ANNUAL, 0) AS TERM_2_TOTAL,
        m.WORK_EDUCATION_2,
        m.ART_EDUCATION_2,
        m.HEALTH_AND_HYGIENE_2,
        m.REGULARITY_AND_PUNCTUALLITY_2,
        sh.WEIGHT_IN_KG,
        sh.HEIGHT_IN_CM
    FROM 
        stg."STUDENT_PROFILE" sp
        INNER JOIN stg."CLASS_DETAIL" cd ON sp.STUDENT_ID = cd.STUDENT_ID
        INNER JOIN stg."PARENT_PROFILE" pp ON sp.STUDENT_ID = pp.STUDENT_ID
        INNER JOIN stg."CLASS_INFO" ci ON cd.CLASS_ID = ci.CLASS_ID
        INNER JOIN stg."SUBJECT" s ON ci.CLASS_NUMBER = s.CLASS_NUMBER
        INNER JOIN stg."marks" m ON sp.STUDENT_ID = m.STUDENT_ID AND s.SUBJECT = m.SUBJECT
        LEFT JOIN stg."STUDENT_HEALTH" sh ON sp.STUDENT_ID = sh.STUDENT_ID
),
PerformanceDetails AS (
    SELECT 
        STUDENT_ID,
        STUDENT_NAME,
        ACADEMIC_YEAR,
        FATHER_NAME,
        MOTHER_NAME,
        DATE_OF_BIRTH,
        CLASS,
        SUBJECT,
        PERIODIC_TEST_1,
        NOTE_BOOK_1,
        SUBJECT_ENRICHMENT_1,
        HALF_YEARLY,
        TERM_1_TOTAL,
        CASE 
            WHEN TERM_1_TOTAL BETWEEN 80 AND 100 THEN 'OUTPERFORM' 
            WHEN TERM_1_TOTAL BETWEEN 60 AND 79 THEN 'UNDERPERFORM' 
            WHEN TERM_1_TOTAL BETWEEN 33 AND 59 THEN 'AVERAGE' 
            ELSE 'Fail' 
        END AS HALF_YEARLY_PERFORMANCE,
        WORK_EDUCATION_1,
        ART_EDUCATION_1,
        HEALTH_AND_HYGIENE_1,
        REGULARITY_AND_PUNCTUALLITY_1,
        PERIODIC_TEST_2,
        NOTE_BOOK_2,
        SUBJECT_ENRICHMENT_2,
        ANNUAL,
        TERM_2_TOTAL,
        CASE 
            WHEN TERM_2_TOTAL BETWEEN 80 AND 100 THEN 'OUTPERFORM' 
            WHEN TERM_2_TOTAL BETWEEN 60 AND 79 THEN 'UNDERPERFORM' 
            WHEN TERM_2_TOTAL BETWEEN 33 AND 59 THEN 'AVERAGE' 
            ELSE 'Fail' 
        END AS ANNUAL_PERFORMANCE,
        WORK_EDUCATION_2,
        ART_EDUCATION_2,
        HEALTH_AND_HYGIENE_2,
        REGULARITY_AND_PUNCTUALLITY_2,
        ROUND(((TERM_1_TOTAL + TERM_2_TOTAL) / 2)::numeric, 2) AS GRAND_TOTAL,
        CASE 
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 91 AND 100 THEN 'A1'
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 81 AND 90 THEN 'A2'
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 71 AND 80 THEN 'B1'
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 61 AND 70 THEN 'B2'
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 51 AND 60 THEN 'C1'
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 41 AND 50 THEN 'C2'
            WHEN ((TERM_1_TOTAL + TERM_2_TOTAL) / 2) BETWEEN 33 AND 40 THEN 'D'
            ELSE 'E'
        END AS GRADE,
        WEIGHT_IN_KG,
        HEIGHT_IN_CM
    FROM StudentDetails
),
AggregatedPerformance AS (
    SELECT
        STUDENT_ID,
        STUDENT_NAME,
        ACADEMIC_YEAR,
        FATHER_NAME,
        MOTHER_NAME,
        DATE_OF_BIRTH,
        CLASS,
        SUBJECT,
        PERIODIC_TEST_1,
        NOTE_BOOK_1,
        SUBJECT_ENRICHMENT_1,
        HALF_YEARLY,
        TERM_1_TOTAL,
        HALF_YEARLY_PERFORMANCE,
        WORK_EDUCATION_1,
        ART_EDUCATION_1,
        HEALTH_AND_HYGIENE_1,
        REGULARITY_AND_PUNCTUALLITY_1,
        PERIODIC_TEST_2,
        NOTE_BOOK_2,
        SUBJECT_ENRICHMENT_2,
        ANNUAL,
        TERM_2_TOTAL,
        ANNUAL_PERFORMANCE,
        WORK_EDUCATION_2,
        ART_EDUCATION_2,
        HEALTH_AND_HYGIENE_2,
        REGULARITY_AND_PUNCTUALLITY_2,
        GRAND_TOTAL,
        GRADE,
        SUM(GRAND_TOTAL) OVER (PARTITION BY STUDENT_ID) AS OVERALL_MARKS,
        ROUND(SUM(GRAND_TOTAL) OVER (PARTITION BY STUDENT_ID) / COUNT(*) OVER (PARTITION BY STUDENT_ID)::numeric, 2) AS PERCENT,
        CASE 
            WHEN ROUND(SUM(GRAND_TOTAL) OVER (PARTITION BY STUDENT_ID) / COUNT(*) OVER (PARTITION BY STUDENT_ID)::numeric, 2) > 40 THEN 'PASS'
            ELSE 'FAIL'
        END AS STATUS,
        WEIGHT_IN_KG,
        HEIGHT_IN_CM
    FROM PerformanceDetails
)
SELECT * 
FROM AggregatedPerformance